<?xml version="1.0" encoding="UTF-8"?>
<settings xmlns="http://maven.apache.org/SETTINGS/1.2.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.2.0 https://maven.apache.org/xsd/settings-1.2.0.xsd">
  <!-- 本地仓库路径，默认：${user.home}/.m2/repository -->
  <localRepository>/path/to/local/repo</localRepository>

  <!-- 是否需要和用户交互获得输入，默认: true -->
  <interactiveMode>true</interactiveMode>

  <!-- 离线模式运行，默认: false -->
  <offline>false</offline>

  <!--是否需要用plugin-registry.xml文件来管理插件版本，默认为：false -->
  <usePluginRegistry>false</usePluginRegistry>

  <!-- pluginGroup列表 -->
  <pluginGroups>
    <!-- 使用某个插件时如果没有提供groupId，maven使用pluginGroup配置的groupId -->
    <pluginGroup>com.your.plugins</pluginGroup>
  </pluginGroups>

  <!-- 代理列表 -->
  <proxies>
    <!-- 代理 -->
    <proxy>
      <!-- 代理的唯一ID -->
      <id>optional</id>
      <!-- 为true表示激活 -->
      <active>true</active>
      <!-- 协议 -->
      <protocol>http</protocol>
      <!-- 账号 -->
      <username>proxyuser</username>
      <!-- 密码 -->
      <password>proxypass</password>
      <!-- 主机名 -->
      <host>proxy.host.net</host>
      <!-- 端口号 -->
      <port>80</port>
      <!-- 不被代理的主机名列表 -->
      <nonProxyHosts>local.net|some.host.com</nonProxyHosts>
    </proxy>
  </proxies>

  <!-- servers 配置仓库认证信息 -->
  <servers>
    <!-- server -->
    <server>
      <!-- 唯一ID，该ID必须与POM中需要认证的repository元素的ID一致 -->
      <id>deploymentRepo</id>
      <!-- 用户名 -->
      <username>repouser</username>
      <!-- 密码 -->
      <password>repopwd</password>
      <!-- 私钥 -->
      <privateKey>/path/to/private/key</privateKey>
      <!-- 私钥密码 -->
      <passphrase>optional; leave empty if not used.</passphrase>
      <!-- 文件被创建时的权限，对应了unix系统的权限 -->
      <filePermissions>755</filePermissions>
      <!-- 目录被创建时的权限 -->
      <directoryPermissions>755</directoryPermissions>
      <!-- 传输层额外的配置项 -->
      <configuration>

      </configuration>
    </server>
  </servers>

  <!-- 镜像列表 -->
  <mirrors>
    <!-- 镜像 -->
    <mirror>
      <!-- 镜像唯一ID -->
      <id>mirrorId</id>
      <!--
        被镜像的服务器的id：
        central 表示该配置为中央仓库镜像，任何对于中央仓库的请求都会转到该镜像
        * 匹配所有的远程仓库，任何对于远程仓库的请求都会被转到该镜像
        external:* 匹配所有不在本机上的远程仓库，使用localhost的除外，使用file://协议的除外
        repo1,repo2,... 匹配指定的远程仓库，使用都搞分割，所有对于这些指定的远程仓库的请求都会被转到该镜像
        *,!repo1 匹配除了repo1外的所有远程仓库，对除了repo1外的所有远程仓库的请求都会被转到该镜像
      -->
      <mirrorOf>repositoryId</mirrorOf>
      <!-- 镜像的名字 -->
      <name>Human Readable Name for this Mirror.</name>
      <!-- 镜像的url -->
      <url>http://my.repository.com/repo/path</url>
    </mirror>

    <!--
      maven 3.8.1版本之后使用如下配置禁用了http链接，默认情况下必须使用https仓库地址。如果要使用http的仓库，
      则需要将blocked设置为false
    -->
    <mirror>
      <id>maven-default-http-blocker</id>
      <mirrorOf>external:http:*</mirrorOf>
      <name>Pseudo repository to mirror external repositories initially using HTTP.</name>
      <url>http://0.0.0.0/</url>
      <blocked>true</blocked>
    </mirror>
  </mirrors>

  <!-- profile列表 -->
  <profiles>
    <!-- profile -->
    <profile>
      <!-- 唯一ID -->
      <id>jdk-1.4</id>
      <!-- 激活的条件 -->
      <activation>
        <!-- 默认是否激活 -->
        <activeByDefault>false</activeByDefault>
        <!-- 激活的条件：匹配的jdk被检测到时激活 -->
        <jdk>1.4</jdk>
        <!-- 激活的条件：匹配的操作系统被检测到时激活 -->
        <os>
          <!-- 操作系统名字 -->
          <name>os name</name>
          <!-- 操作系统所属家族 -->
          <family>os family</family>
          <!-- 操作系统体系结构 -->
          <arch>x86</arch>
          <!-- 操作系统版本 -->
          <version>5.2.1</version>
        </os>
        <!-- 激活的条件：检测到某一个属性时激活 -->
        <property>
          <!-- 属性名称 -->
          <name>name</name>
          <!-- 属性的值 -->
          <value>value</value>
        </property>
        <!-- 激活的条件：检测文件存在或不存在来激活 -->
        <file>
          <!-- 指定的文件存在 -->
          <exists>file</exists>
          <!-- 指定的文件不存在 -->
          <missing>file</missing>
        </file>
      </activation>
      <!-- 扩展属性列表 -->
      <properties>
        <my.property>property</my.property>
      </properties>
      <!-- 仓库列表 -->
      <repositories>
        <!-- 仓库 -->
        <repository>
          <!-- 唯一ID -->
          <id>jboss</id>
          <!-- 仓库名字 -->
          <name>Repository for JBoss</name>
          <!-- 仓库地址 -->
          <url>http://repository.jboss.com/maven2/</url>
          <!-- 布局，默认 -->
          <layout>default</layout>
          <!-- release版本 -->
          <releases>
            <!-- 启用release版本下载 -->
            <enabled>true</enabled>
            <!--
              从远程仓库检查更新的频率：
              daily 每天检查一次（默认）
              never 从不检查更新
              always 每次构建检查更新
              interval:X 每个X分钟检查一次更新
             -->
            <updatePolicy>daily</updatePolicy>
            <!--
              检查文件校验和的策略：
              warn 执行构建时输出警告信息（默认）
              fail 遇到校验和失败时构建失败
              ignore 忽略校验和失败错误
            -->
            <checksumPolicy>fail</checksumPolicy>
          </releases>
          <!-- 快照版本 -->
          <snapshots>
            <!-- 启用快照版本下载 -->
            <enabled>true</enabled>
            <!--
              从远程仓库检查更新的频率：
              daily 每天检查一次（默认）
              never 从不检查更新
              always 每次构建检查更新
              interval:X 每个X分钟检查一次更新
             -->
            <updatePolicy>daily</updatePolicy>
            <!--
              检查文件校验和的策略：
              warn 执行构建时输出警告信息（默认）
              fail 遇到校验和失败时构建失败
              ignore 忽略校验和失败错误
            -->
            <checksumPolicy>fail</checksumPolicy>
          </snapshots>
        </repository>
      </repositories>
      <!-- 插件仓库列表 -->
      <pluginRepositories>
        <pluginRepository>
          <!-- 唯一ID -->
          <id>plugin-repository-id</id>
          <!-- 插件仓库名字 -->
          <name>plugin repository name</name>
          <!-- 插件仓库url -->
          <url>plugin repository url</url>
          <!-- 插件仓库布局 -->
          <layout>default</layout>
          <!-- release版本 -->
          <releases>
            <!-- 启用release版本下载 -->
            <enabled>true</enabled>
            <!--
              从远程仓库检查更新的频率：
              daily 每天检查一次（默认）
              never 从不检查更新
              always 每次构建检查更新
              interval:X 每个X分钟检查一次更新
             -->
            <updatePolicy>daily</updatePolicy>
            <!--
              检查文件校验和的策略：
              warn 执行构建时输出警告信息（默认）
              fail 遇到校验和失败时构建失败
              ignore 忽略校验和失败错误
            -->
            <checksumPolicy>fail</checksumPolicy>
          </releases>
          <!-- 快照版本 -->
          <snapshots>
            <!-- 启用快照版本下载 -->
            <enabled>true</enabled>
            <!--
              从远程仓库检查更新的频率：
              daily 每天检查一次（默认）
              never 从不检查更新
              always 每次构建检查更新
              interval:X 每个X分钟检查一次更新
             -->
            <updatePolicy>daily</updatePolicy>
            <!--
              检查文件校验和的策略：
              warn 执行构建时输出警告信息（默认）
              fail 遇到校验和失败时构建失败
              ignore 忽略校验和失败错误
            -->
            <checksumPolicy>fail</checksumPolicy>
          </snapshots>
        </pluginRepository>
      </pluginRepositories>
    </profile>
  </profiles>

  <!-- 激活的profile列表 -->
  <activeProfiles>
    <activeProfile>alwaysActiveProfile</activeProfile>
    <activeProfile>anotherAlwaysActiveProfile</activeProfile>
  </activeProfiles>

</settings>
